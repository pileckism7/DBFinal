

/**
 * Graduate DataBases Final Project GUI
 * Professor Myers
 * 
 * @author martinprice
 * @author Mantas P
 * @author Chris Malitsky
 * @version November 18, 2018
 */

import java.util.ArrayList;

import java.awt.*;
import java.awt.event.KeyEvent;
import javax.swing.*;
public class GUI extends JFrame
{
	/** Instance Fields for GUI*/
	private JButton addToCart;
	private JButton addToWishList;
	private JButton saveCart;
	private JButton placeOrder;
	private JButton adminTools;
	private JButton search;
	
	private JPanel inventory;
	private JPanel inventoryButtons;
	private JPanel admin;
	private JPanel cart;
	private JPanel cartButtons;
	private JPanel wishList;
	private JPanel options;
	private JPanel userSelect;
	
	private JList products;
	private JList shoppingCart;
	
	private JComboBox users;
	private JComboBox dataBases;
	private JComboBox categories;
	private JComboBox supplier;
	
	private JSlider priceRange;
	private JLabel maxPrice;
	
	
	private JMenuBar menu;
	
	private final int SHORTCUT_MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
	
	/** Instance fields for Variables */
	private String currentUser;
	private String currentDataBase;
	private String currentCategory;
	
	/** Constructor */
	public GUI()
	{
		super("Daymnzon.com");
		createGUI();
	}
	
	/** Calls all the methods which create the individual components */
	private void createGUI()
	{
		setSize(1000, 850);
		super.
		setLayout(null);
		
		buildMenuBar();
		buildUsers();
		buildInventory();
		buildCart();
		buildWishList();
		buildAdmin();
		buildOptions();
		
		setVisible(true);
	}
	
	/** 
	 * Builds the menu bar
	 * Menu Bar contains:
	 * 	file > quit
	 */
	private void buildMenuBar()
	{
		menu = new JMenuBar();
		setJMenuBar(menu);
		
		//file
		JMenu file = new JMenu("File");
		menu.add(file);
		JMenuItem quit = new JMenuItem("Quit");
		quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, SHORTCUT_MASK));
		quit.addActionListener(e -> System.exit(0));
		file.add(quit);
	}
	
	/**
	 * Builds the users panel
	 */
	private void buildUsers()
	{
		userSelect = new JPanel();
		userSelect.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		userSelect.setLayout(new BorderLayout());
		userSelect.setBounds(750, 0, 250, 50);
		
		//new combo box
		users = new JComboBox(populateUsers());
		userSelect.add(users, BorderLayout.CENTER);
		
		add(userSelect);
	}
	
	/**
	 * Runs a query to add users to the GUI
	 * 
	 * @return new String[] of users
	 * @version 1: no query, hard coded names
	 */
	private String[] populateUsers()
	{
		return new String[] {"Martin", "Chris", "Mantas", "Mia K"};
	}
	
	/**
	 * Builds the product view inventory,
	 * Contains the two buttons down below
	 */
	private void buildInventory()
	{
		inventory = new JPanel();
		inventory.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		inventory.setBounds(0,125,700,500);
		inventory.setLayout(new BorderLayout());
		
		inventoryButtons = new JPanel();
		inventoryButtons.setPreferredSize(new Dimension(700, 100));
		inventoryButtons.setLayout(null);
		inventoryButtons.setBackground(Color.GRAY);
		
		addToCart = new JButton("Add to Cart");
		addToCart.setBounds(500,50, 125, 25);
		addToCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToCart.addActionListener(a -> addToCart());
		inventoryButtons.add(addToCart);
		
		addToWishList = new JButton("Add To Wish List");
		addToWishList.setBounds(100, 50, 125, 25);
		addToWishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToWishList.addActionListener(a -> addToWishList());
		inventoryButtons.add(addToWishList);
		
		products = new JList(populateProducts(new DefaultListModel()));
		products.setPreferredSize(new Dimension(400, 700));
		
		inventory.add(products, BorderLayout.CENTER);
		inventory.add(inventoryButtons, BorderLayout.SOUTH);
		add(inventory);
	}
	
	/**
	 * Runs a query to initially populate the inventory
	 * 
	 * @ return new DefaultListModel of products
	 * @ version 2: no query, hard coded items ADDED to a DefaultListModel
	 */
	private DefaultListModel populateProducts(DefaultListModel productsQuery)
	{
		productsQuery.addElement("Pen");
		productsQuery.addElement("Computer");
		productsQuery.addElement("Bike");
		
		return productsQuery;
	}
	
	/**
	 * Builds the cart
	 */
	private void buildCart()
	{
		cart = new JPanel();
		cart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		cart.setBounds(750, 125, 250, 500);
		cart.setLayout(new BorderLayout());
		
		cartButtons = new JPanel();
		cartButtons.setBackground(Color.CYAN);
		cartButtons.setPreferredSize(new Dimension(250, 100));
		cartButtons.setLayout(null);
		
		saveCart = new JButton("Save Cart");
		saveCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		saveCart.setBounds(50, 15, 150, 30);
		
		placeOrder = new JButton("Order");
		placeOrder.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		placeOrder.setBounds(25, 50, 200, 40);
		
		cartButtons.add(saveCart);
		cartButtons.add(placeOrder);
		
		shoppingCart = new JList(new DefaultListMapping());
		shoppingCart.setPreferredSize(new Dimension(250, 550));
		
		cart.add(cartButtons, BorderLayout.SOUTH);
		cart.add(shoppingCart, BorderLayout.CENTER);
		
		add(cart);
	}
	
	/**
	 * Builds the wishlist
	 */
	private void buildWishList()
	{
		wishList = new JPanel();
		wishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		wishList.setBounds(0, 650, 700, 150);
		
		add(wishList);
	}
	
	/**
	 * Builds the admin panel
	 * Panel contains:
	 * 	> admin button
	 * 	> advertisement
	 */
	private void buildAdmin()
	{
		admin = new JPanel();
		admin.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		admin.setBounds(700, 650, 300, 150);
		admin.setLayout(null);
		
		adminTools = new JButton("Admin Access");
		adminTools.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		adminTools.setBounds(50, 125, 200, 25);
		
		admin.add(adminTools, BorderLayout.SOUTH);
		
		add(admin);
	}
	
	/**
	 * Builds the options bar
	 * Bar contains:
	 * 	> databases
	 * 	> search btn
	 */
	private void buildOptions()
	{
		options = new JPanel();
		options.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		options.setBounds(0, 0, 700, 100);
		options.setLayout(null);
		
		dataBases = new JComboBox(new String[] {"Daymnzon", "Adventureworks", "Northwind", "Sakila", "ALL"});
		dataBases.setBounds(0, 40, 150,25);
		categories = new JComboBox(populateCategories());
		categories.setBounds(175, 40, 150, 25);
		supplier = new JComboBox(populateSuppliers());
		supplier.setBounds(350, 40, 150, 25);
		
		maxPrice = new JLabel("0");
		maxPrice.setBounds(525,65, 150, 20);
		maxPrice.setHorizontalAlignment(JLabel.CENTER);
		priceRange = new JSlider(0, populatePrice(), 0);
		priceRange.setBounds(525, 40, 150, 25);
		priceRange.setMajorTickSpacing(populatePrice() / 4);
		priceRange.setMinorTickSpacing(populatePrice() / 16);
		priceRange.setPaintTicks(true);
		priceRange.addChangeListener(ce -> maxPrice.setText("$" + priceRange.getValue()));
		
		search = new JButton("Search");
		search.setBounds(300,75, 100, 25);
		search.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		search.setEnabled(true);
		search.addActionListener(s -> search((String)dataBases.getSelectedItem(), 
					(String)categories.getSelectedItem(), (String)supplier.getSelectedItem(),
					priceRange.getValue()));
		
		JLabel m = new JLabel("Market");
		m.setBounds(0,10, 150,25);
		m.setHorizontalAlignment(JLabel.CENTER);
		JLabel c = new JLabel("Categories");
		c.setBounds(175, 10, 150, 25);
		c.setHorizontalAlignment(JLabel.CENTER);
		JLabel s = new JLabel("Supplier");
		s.setBounds(350, 10, 150, 25);
		s.setHorizontalAlignment(JLabel.CENTER);
		JLabel p = new JLabel("Price Range");
		p.setBounds(525, 10, 150, 25);
		p.setHorizontalAlignment(JLabel.CENTER);
		
		options.add(m);
		options.add(c);
		options.add(s);
		options.add(p);
		
		options.add(dataBases);
		options.add(categories);
		options.add(supplier);
		options.add(priceRange);
		options.add(maxPrice);
		
		options.add(search);
		add(options);
	}
	
	/**
	 * Runs a query to generate all the suppliers
	 * 
	 * @return a new String[] of suppliers + ALL
	 * @version 1 : no query, hard data
	 */
	private String[] populateSuppliers()
	{
		return new String[] {"Apple", "Microsoft", "Android", "ALL"};
	}
	
	/**
	 * Runs a query to generate all the categories
	 * 
	 * @return a new String[] of categories + ALL
	 * @version 1 : no query, hard data
	 */
	private String[] populateCategories()
	{
		return new String[] {"Entertainment", "Hardware", "Software", "ALL"};
	}
	
	/**
	 * Runs a query to find the most expensive item in the Inventory
	 * 
	 * @return int of the highest found price
	 * @version 1 : no query, hard data
	 */
	private int populatePrice()
	{
		return 10000;
	}
	
	/**
	 * Runs a query based on the information passed from the options ComboBox's
	 * 
	 * No return, copies the query into inventory
	 * @versiom 1 : no query, load data into inventory view manually by adding to DefaultList
	 */
	private void search(String db, String category, String supplier, int maxPrice) 
	{
		DefaultListModel searchQuery = (DefaultListModel)products.getModel();
		searchQuery.addElement(String.format("%s\t\t%s\t\t%s\t\t$%d", db,category, supplier, maxPrice));
	}
	
	/**
	 * Adds the select products to the cart
	 * 
	 * no return, just moves data over
	 */
	private void addToCart()
	{
		
	}
	
	/**
	 * Adds the select prodcuts to the wishList
	 * 
	 * no return, just moves over data
	 */
	private void addToWishList()
	{
		
	}
}
