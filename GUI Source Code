
/*
 * TODO
 * 		admin page
 * 		save cart button
 * 		Color themes
 */



/**

 * Graduate DataBases Final Project GUI
 * Professor Myers
 * 
 * @author martinprice
 * @author Mantas P
 * @author Chris Malitsky
 * @version November 18, 2018
 */
import java.sql.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import javax.swing.*;
public class GUI extends JFrame
{
	/** Instance Fields for SQL connection */
	private String username;
	private String password;
	private Connection conn;
	private Statement query;
	private ResultSet result;
	
	/** Instance Fields for GUI*/
	private JButton addToCart;
	private JButton addToWishList;
	private JButton saveCart;
	private JButton placeOrder;
	private JButton adminTools;
	private JButton search;
	private JButton wishListOrder;
	private JButton wishListRemove;
	private JButton previousPage;
	private JButton nextPage;
	private JLabel currentPage;
	
	private JPanel inventory;
	private JPanel inventoryButtons;
	private JPanel admin;
	private JPanel cart;
	private JPanel cartButtons;
	private JPanel wishList;
	private JPanel options;
	private JPanel userSelect;
	
	private JList products;
	private JLabel productName;
	private JLabel productDescription;
	private JLabel productCost;
	
	private JList shoppingCart;
	private JLabel totalCost;
	
	private JList userWishList;
	private JList userAdvertisementList;
	
	private JComboBox users;
	private JComboBox filterSearch;
	private JComboBox filterSubSearch;
	private JLabel subSearchLabel;
	
	private JSlider priceRange;
	private JLabel maxPrice;
 
	private JMenuBar menu;
	
	private final int SHORTCUT_MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
	
	/** Instance fields for Variables */
	private int currentPageNumber;
	private int MAX_PAGES;
	private int size;
	private final int MAX_RESULTS_PER_PAGE = 23;
	
	private String queryString;
	private String queryDetailsString;
	private String dbPriceFilter;
	private String currentDB;
	
	/** Constructor 
	 * @throws SQLException */
	public GUI(String un, String pw)
	{
		super("Daymnzon.com");
		username = un;
		password = pw;
		if(setUpConnection(un, pw))
		{
			System.out.println("CONNECTION ESTABLSIHED");
			createGUI();
		}	
		else
			System.err.println("COULD NOT CONNECT TO THE DATABASE");
	}
	
	/**
	 * Initializes SQL variables and connects to the data base
	 *
	 * @param un : user name
	 * @param pw : password
	 * @return true, no issues
	 * @throws SQLException 
	 */
	private boolean setUpConnection(String un, String pw)
	{
		try 
		{
			conn = DriverManager.getConnection(String.format("jdbc:mysql://elvis.rowan.edu:3306/%s?&useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", un), un, pw);
			query = conn.createStatement();
			return true;
		}
		catch(SQLException e) {e.printStackTrace(); return false;}
	}
	
	/** Calls all the methods which create the individual components */
	private void createGUI()
	{
		setSize(1000, 850);
		setLayout(null);
		
		buildMenuBar();
		buildUsers();
		buildInventory();
		buildCart();
		buildWishList();
		buildAdmin();
		buildOptions();
		
		setVisible(true);
	}
	
	/** 
	 * Builds the menu bar
	 * Menu Bar contains:
	 * 	file > quit
	 */
	private void buildMenuBar()
	{
		menu = new JMenuBar();
		setJMenuBar(menu);
		
		//file
		JMenu file = new JMenu("File");
		menu.add(file);
		JMenuItem quit = new JMenuItem("Quit");
		quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, SHORTCUT_MASK));
		quit.addActionListener(e -> System.exit(0));
		file.add(quit);
	}
	
	/**
	 * Builds the users panel
	 */
	private void buildUsers()
	{
		userSelect = new JPanel();
		userSelect.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		userSelect.setLayout(new BorderLayout());
		userSelect.setBounds(750, 0, 250, 50);
		
		try {users = new JComboBox(populateUsers(new DefaultComboBoxModel())); }
		catch(SQLException e) {}
		
		users.addActionListener(a -> {
			try { changeCurrentUser((String)users.getSelectedItem()); }
			catch(SQLException e) {}
		});
		userSelect.add(users, BorderLayout.CENTER);
		
		add(userSelect);
	}
	
	/**
	 * Changes the current user
	 *  > calculates the current customer_id
	 * 	> updates wish List
	 * 	> changes Ad
	 * 	> changes Rate This Product
	 */
	private void changeCurrentUser(String currentUser) throws SQLException
	{
		String[] curr = currentUser.split(":");
		int c_id = Integer.parseInt(curr[0]);
		
		try {populateUserWishList(c_id, (DefaultListModel)userWishList.getModel()); }
		catch(SQLException e) {}
	}
	
	/**
	 * Updates the wishList for the current users
	 * > Removes all current values in the list,
	 * > runs query to get the wish list of the currentUser
	 */
	private void populateUserWishList(int customer_id, DefaultListModel wishList) throws SQLException
	{
		wishList.removeAllElements();
		result = query.executeQuery(String.format("SELECT product.product_id, product.name FROM customer "
												+ "JOIN customer_wish ON customer.customer_id = customer_wish.customer_id "
												+ "JOIN product ON customer_wish.product_id = product.product_id "
												+ "WHERE customer.customer_id = %s", customer_id));
		while(result.next())
			wishList.addElement(String.format("%s:\t%s",result.getString("product_id"), result.getString("name")));
	}
	
	/**
	 * Runs a query to add users to the GUI
	 * 
	 * @return new String[] of users
	 * @version 1: no query, hard coded names
	 * @throws SQLException 
	 */
	private DefaultComboBoxModel populateUsers(DefaultComboBoxModel usersQuery) throws SQLException
	{
		usersQuery.removeAllElements();
		result = query.executeQuery(String.format("SELECT customer_id, first_name, last_name FROM %s.customer", username));
		usersQuery.addElement("-1: Select A User");
		while(result.next())
			usersQuery.addElement(String.format("%s: %s %s", result.getString("customer_id"), result.getString("first_name"), result.getString("last_name")));
		return usersQuery;
	}
	
	/**
	 * Builds the product view inventory,
	 * Contains the two buttons down below
	 * @throws SQLException 
	 */
	private void buildInventory()
	{
		inventory = new JPanel();
		inventory.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		inventory.setBounds(0,125,700,500);
		inventory.setLayout(new BorderLayout());
		
		inventoryButtons = new JPanel();
		inventoryButtons.setPreferredSize(new Dimension(700, 95));
		inventoryButtons.setLayout(null);
		inventoryButtons.setBackground(Color.LIGHT_GRAY);
		
		addToCart = new JButton("Add to Cart");
		addToCart.setBounds(475, 15, 125, 25);
		addToCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToCart.addActionListener(a -> {
			try { addToCart(products); } 
			catch (SQLException e1) {} });
		inventoryButtons.add(addToCart);
		
		previousPage = new JButton("<");
		previousPage.setEnabled(false);
		previousPage.setBounds(120, 40, 20, 20);
		previousPage.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		previousPage.addActionListener(p -> previousPage());
		inventoryButtons.add(previousPage);
		
		nextPage = new JButton(">");
		nextPage.setEnabled(false);
		nextPage.setBounds(250, 40, 20, 20);
		nextPage.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		nextPage.addActionListener(n -> nextPage());
		inventoryButtons.add(nextPage);
		
		currentPageNumber = 1;
		currentPage = new JLabel("" + currentPageNumber);
		currentPage.setBounds(190, 40, 20, 20);
		inventoryButtons.add(currentPage);
		
		addToWishList = new JButton("Add To Wish List");
		addToWishList.setBounds(475, 60, 125, 25);
		addToWishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToWishList.addActionListener(a -> addToWishList(products, userWishList));
		inventoryButtons.add(addToWishList);
		
		queryString = "SELECT product.product_id, product.name FROM product";
		queryDetailsString = "SELECT name, description, cost FROM product WHERE product_id = %d";
		products = new JList(new DefaultListModel());
		products.setPreferredSize(new Dimension(400, 400));
		products.addListSelectionListener(p -> {
			try 
			{ 
				if(products.getSelectedIndex() > -1)
					updateProductInfo((String)products.getSelectedValue()); 
			} 
			catch (SQLException e) {} });
		
		JPanel productInfo = new JPanel();
		productInfo.setPreferredSize(new Dimension(300, 400));
		productInfo.setLayout(null);
		
		productName = new JLabel();
		productName.setBounds(25, 25, 250, 25);
		productName.setHorizontalAlignment(JLabel.CENTER);
		productDescription = new JLabel("Description:\n");
		productDescription.setBounds(25, 75, 250, 250);
		productDescription.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		productCost = new JLabel("Cost");
		productCost.setBounds(25, 350, 150, 25);
		productCost.setHorizontalAlignment(JLabel.CENTER);
		
		productInfo.add(productName);
		productInfo.add(productDescription);
		productInfo.add(productCost);
		
		inventory.add(productInfo, BorderLayout.EAST);
		inventory.add(products, BorderLayout.WEST);
		inventory.add(inventoryButtons, BorderLayout.SOUTH);
		add(inventory);
	}
	
	/**
	 * Runs a query to initially populate the inventory
	 * Sets the MAX_PAGES for every query = Result Size / 23
	 * @throws SQLException 
	 * 
	 * @ return new DefaultListModel of products
	 * @ version 4: size calculated elsewhere
	 */
	private DefaultListModel populateProducts(DefaultListModel productsQuery) throws SQLException
	{	
		productsQuery = new DefaultListModel();
		
		int offset = (currentPageNumber-1) * MAX_RESULTS_PER_PAGE;
		String queryStringLimits = String.format(" LIMIT %d OFFSET %d", MAX_RESULTS_PER_PAGE, offset);
				
		result = query.executeQuery(queryString + queryStringLimits);
		while(result.next())
			productsQuery.addElement(String.format("%s:\t\t$%.2f:\t\t%s", result.getString("Name"), Double.parseDouble(result.getString("Price")), result.getString("Supplier")));
	
		
		MAX_PAGES = size / MAX_RESULTS_PER_PAGE;
		if(MAX_PAGES+1 < 2)
			nextPage.setEnabled(false);
		else
			nextPage.setEnabled(true);
		return productsQuery;
	}
	
	/**
	 * Calculates the total size of a search once
	 * 
	 * @return size: overall size of the result set
	 * @throws SQLException 
	 */
	private int getSearchSize() throws SQLException
	{
		String[] queries = queryString.split("\n");
		int size = 0;
		for(String q : queries)
		{
			result = query.executeQuery(q);
			while(result.next())
				size ++;
		}
		return size; 
	}
	
	/**
	 * Runs a query to gather product information from a selected product(s)
	 * 
	 * no return, hard data
	 * @version 2 : query on the product ID, handles only one at a time
	 * @throws SQLException
	 */
	private void updateProductInfo(String selected) throws SQLException
	{
		String[] product = selected.split(":");
		String prodName = product[0];
		Double prodPrice = Double.parseDouble(product[1].trim().substring(1, product[1].length()-2));
		
		result = query.executeQuery(String.format(queryDetailsString, prodName, prodPrice));
		if(result.first())
		{
			productName.setText(result.getString("Name"));
			productDescription.setText(result.getString("Description"));
			productCost.setText("$" + Double.parseDouble(result.getString("Price")));
		}
	}
	
	/**
	 * Builds the cart
	 */
	private void buildCart()
	{
		cart = new JPanel();
		cart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		cart.setBounds(700, 125, 300, 500);
		cart.setLayout(new BorderLayout());
		
		cartButtons = new JPanel();
		cartButtons.setBackground(Color.CYAN);
		cartButtons.setPreferredSize(new Dimension(250, 100));
		cartButtons.setLayout(null);
		
		saveCart = new JButton("Save Cart");
		saveCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		saveCart.setBounds(0, 15, 150, 30);
		
		placeOrder = new JButton("Order");
		placeOrder.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		placeOrder.setBounds(0, 50, 200, 40);
		placeOrder.addActionListener(e -> checkOrder(shoppingCart.getModel().getSize()));
		
		totalCost = new JLabel("$0.00");
		totalCost.setBounds(175, 15, 240, 30);
		
		cartButtons.add(saveCart);
		cartButtons.add(placeOrder);
		cartButtons.add(totalCost);
		
		shoppingCart = new JList(new DefaultListModel());
		shoppingCart.setPreferredSize(new Dimension(250, 550));
		
		cart.add(cartButtons, BorderLayout.SOUTH);
		cart.add(shoppingCart, BorderLayout.CENTER);
		
		add(cart);
	}
	
	/**
	 * brings up the order menu if the cart has more than 0 products
	 */
	private void checkOrder(int numProducts)
	{
		if(numProducts > 0)
			new Order(shoppingCart, "2", username, password); 
	}
	
	/**
	 * Builds the wishlist
	 * contains
	 * 	> WishList
	 * 	> Ratings
	 */
	private void buildWishList()
	{
		wishList = new JPanel();
		wishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		wishList.setBounds(0, 650, 700, 150);
		wishList.setLayout(new BorderLayout());
		
		userWishList = new JList(new DefaultListModel());
		userWishList.setPreferredSize(new Dimension(300,100));
		
		JPanel userWishListOptions = new JPanel();
		userWishListOptions.setPreferredSize(new Dimension(100, 100));
		userWishListOptions.setLayout(null);
		
		wishListOrder = new JButton("Move to Cart");
		wishListOrder.setBounds(5, 25, 90, 20);
		wishListOrder.addActionListener(a -> {
			try { addToCart(userWishList); } 
			catch (SQLException e) {} });
		wishListRemove = new JButton("Remove");
		wishListRemove.setBounds(5, 75, 90, 20);
		wishListRemove.addActionListener(b -> removeFromList(userWishList));
		
		userWishListOptions.add(wishListOrder);
		userWishListOptions.add(wishListRemove);
		
		userAdvertisementList = new JList(populateAdvertisementList(new DefaultListModel()));
		userAdvertisementList.setPreferredSize(new Dimension(300, 100));
		
		wishList.add(userWishListOptions,BorderLayout.CENTER);
		wishList.add(userAdvertisementList, BorderLayout.EAST);
		wishList.add(userWishList, BorderLayout.WEST);
		add(wishList);
	}
	
	/**
	 * populates the advertisements based on the current users purchases
	 * 
	 * @version 1: runs a query against the view
	 * @return map : populate Model to be displayed
	 */
	private DefaultListModel populateAdvertisementList(DefaultListModel map)
	{
		return map;
	}
	
	/**
	 * Builds the admin panel
	 * Panel contains:
	 * 	> admin button
	 * 	> advertisement
	 */
	private void buildAdmin()
	{
		admin = new JPanel();
		admin.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		admin.setBounds(700, 650, 300, 150);
		admin.setLayout(null);
		
		adminTools = new JButton("Admin Access");
		adminTools.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		adminTools.setBounds(50, 125, 200, 25);
		
		admin.add(adminTools, BorderLayout.SOUTH);
		
		add(admin);
	}
	
	/**
	 * Builds the options bar
	 * Bar contains:
	 * 	> databases
	 * 	> search btn
	 */
	private void buildOptions()
	{
		options = new JPanel();
		options.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		options.setBounds(0, 0, 700, 100);
		options.setLayout(null);
		
		filterSearch = new JComboBox(new String[] {"None", "Marketplace", "Categories", "Suppliers"});
		filterSearch.setBounds(0, 40, 150,25);
		filterSearch.addActionListener(a -> setSubSearchFilter((String)filterSearch.getSelectedItem()));
		
		filterSubSearch = new JComboBox(new String[] {"None"});
		filterSubSearch.setBounds(175, 40, 150, 25);
		
		maxPrice = new JLabel("$");
		maxPrice.setBounds(525,65, 150, 20);
		maxPrice.setHorizontalAlignment(JLabel.CENTER);
		priceRange = new JSlider(0, 100, 50);
		priceRange.setBounds(525, 40, 150, 25);
		priceRange.setMajorTickSpacing(20);
		priceRange.setMinorTickSpacing(5);
		priceRange.setPaintTicks(true);
		priceRange.setValue(100);
		priceRange.addChangeListener(ce -> {
			try { updatePriceFilter(); } 
			catch (SQLException e) {} });
		
		search = new JButton("Search");
		search.setBounds(300,75, 100, 25);
		search.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		search.setEnabled(true);
		search.addActionListener(s -> search((String)filterSearch.getSelectedItem(), (String)filterSubSearch.getSelectedItem(), priceRange.getValue()));
		
		JLabel f = new JLabel("Filter By");
		f.setBounds(0,10, 150,25);
		f.setHorizontalAlignment(JLabel.CENTER);
		
		subSearchLabel = new JLabel("None");
		subSearchLabel.setBounds(175, 10, 150, 25);
		subSearchLabel.setHorizontalAlignment(JLabel.CENTER);
		
		JLabel p = new JLabel("Price Range");
		p.setBounds(525, 10, 150, 25);
		p.setHorizontalAlignment(JLabel.CENTER);
		
		options.add(f);
		options.add(subSearchLabel);
		options.add(p);
		
		options.add(filterSearch);
		options.add(filterSubSearch);
		options.add(priceRange);
		options.add(maxPrice);
		
		options.add(search);
		add(options);
	}
	
	/**
	 * Runs a query to generate all the suppliers
	 * 
	 * @return a DefaultComboBoxModel of all found suppliers
	 * @version 4 : query from both views
	 */
	private DefaultComboBoxModel populateSuppliers(DefaultComboBoxModel suppliers) throws SQLException
	{
		result = query.executeQuery("SELECT Supplier FROM our_product GROUP BY Supplier");
		while(result.next())
			suppliers.addElement(result.getString("Supplier"));
		
		result = query.executeQuery("SELECT Supplier FROM partners_inventory GROUP BY Supplier");
		while(result.next())
			suppliers.addElement(result.getString("Supplier"));
		return suppliers;
	}
	
	/**
	 * Runs a query to generate all the categories
	 * 
	 * @return a new ComboListModel of all found categories
	 * @version 4 : query from both views
	 */
	private  DefaultComboBoxModel populateCategories(DefaultComboBoxModel categories) throws SQLException
	{
		result = query.executeQuery("SELECT Category FROM our_product GROUP BY Category");
		while(result.next())
			categories.addElement(result.getString("Category"));
		
		result = query.executeQuery("SELECT Category FROM partners_inventory GROUP BY Category");
		while(result.next())
			categories.addElement(result.getString("Category"));
		return categories;
	}
	
	/**
	 * Runs a query to find the most expensive item in the Inventory
	 * 
	 * @param orderBy: Detailing which DB to order by
	 * no return, sets new highest found cost
	 * @version 3 : query, using search query
	 */
	private void populatePrice(String orderBy) throws SQLException
	{
		result = query.executeQuery(queryString + orderBy);
		double newCost = 100.00;
		while(result.next())
		{
			try { newCost = Double.parseDouble(result.getString("Price")); break; }
			catch (NumberFormatException e) {};
		}
		System.out.println(newCost);
	
		try{ priceRange.setMaximum(((int)newCost + 1)); } 
		catch (NumberFormatException e) {};
		priceRange.setValue(priceRange.getMaximum());
		priceRange.setMajorTickSpacing(priceRange.getMaximum() / 5);
		priceRange.setMinorTickSpacing(priceRange.getMaximum() / 10);
	}
	
	/**
	 * Updates the price label as well as filters different products by price
	 * @throws SQLException
	 */
	private void updatePriceFilter() throws SQLException
	{
		maxPrice.setText("$" + priceRange.getValue());
		
		String tempQuery = queryString;
		if(((String)filterSearch.getSelectedItem()).equals("Marketplace") || ((String)filterSearch.getSelectedItem()).equals("None"))
			queryString += String.format(" WHERE Price < %d", priceRange.getValue());
		else
			queryString += String.format(" AND Price < %d", priceRange.getValue());
			
		products.setModel(populateProducts((DefaultListModel)products.getModel()));
		queryString = tempQuery;
	}
	/**
	 * Creates a String for the populateProducts method to execute a proper query
	 * 
	 * returns a string to be used in the populateProducts function
	 * @version 2 : no query
	 * @throws SQLException 
	 */
	private void search(String searchQ, String subSearchQ, int price)
	{
		switch(searchQ)
		{
			case "Marketplace":
			{
				switch(subSearchQ)
				{
					case "northwind":
					{
						queryString = "SELECT * FROM northwind_product";
						queryDetailsString = "SELECT * FROM northwind_product WHERE Name = '%s' AND Price = %.2f";
						currentDB = "northwind";
						break;
					}
					
					case "adventureworks":
					{
						queryString = "SELECT * FROM adventureworks_product";
						queryDetailsString = "SELECT * FROM adventureworks_product WHERE Name = '%s' AND Price = %.2f";
						currentDB = "adventureworks";
						break;
					}
					
					case "sakila":
					{
						queryString = "SELECT * FROM sakila_product";
						queryDetailsString = "SELECT * FROM sakila_product WHERE Name = '%s' AND Price = %.2f";
						currentDB = "sakila";
						break;
					}
					default:
					{
						queryString = "SELECT * FROM our_product";
						queryDetailsString = "SELECT * FROM our_product WHERE Name = '%s' AND Price = %.2f";
						currentDB = "our";
						break;
					}
				}
				break;
			}
			case "Categories":
			{
				queryString = String.format("SELECT * FROM overall_inventory WHERE Category = '%s'", subSearchQ);
				queryDetailsString = "SELECT * FROM overall_inventory WHERE Name = '%s' AND Price = %.2f";
				break;
			}
			case "Suppliers":
			{
				queryString = String.format("SELECT * FROM overall_inventory WHERE Supplier = '%s'", subSearchQ);
				queryDetailsString = "SELECT * FROM overall_inventory WHERE Name = '%s' AND Price = %.2f";
				break;
			}
			default:
			{
				queryString = "SELECT * FROM overall_inventory ";
				queryDetailsString = "SELECT * FROM overall_inventory WHERE Name = '%s' AND Price = %.2f";
			}
		}
		currentPageNumber = 1;
		currentPage.setText(""+currentPageNumber);
		products.setSelectedIndex(-1);;
		
		try { size = getSearchSize(); }
		catch (SQLException E) {};
		try { products.setModel(populateProducts((DefaultListModel)products.getModel())); }
		catch (SQLException E) {};	
		try { populatePrice(" ORDER BY Price DESC"); }
		catch (SQLException E) {};
	}
	
	/**
	 * Runs a query to populate the sub search filter drop down, change label text
	 * @param searchType
	 * @version 1 : hard data, no query, case statement
	 */
	private void setSubSearchFilter(String searchType)
	{
		subSearchLabel.setText(searchType);
		((DefaultComboBoxModel)filterSubSearch.getModel()).removeAllElements();
		
		switch(searchType)
		{
			case "Marketplace":
			{
				filterSubSearch.setModel(new DefaultComboBoxModel(new String[] {"Daymnzon", "adventureworks", "sakila", "northwind"}));
				break;
			}
			case "Categories":
			{
				try { filterSubSearch.setModel(populateCategories((DefaultComboBoxModel)filterSubSearch.getModel())); }
				catch (SQLException e) {};
				break;
			}
			case "Suppliers":
			{
				try { filterSubSearch.setModel(populateSuppliers((DefaultComboBoxModel)filterSubSearch.getModel())); }
				catch (SQLException e) {};
				break;
			}
			default:
				filterSubSearch.setModel(new DefaultComboBoxModel(new String[] {"NONE"}));
				break;
		}
	}
	
	/**
	 * runs a query add the selected values into the Shopping Cart
	 * > Get current user id
	 * > run insert into table queries for each selected product
	 * 
	 * @param list : list in which to insert
	 * @version 4 : populates shopping cart with the string, calls updateTotalCost()
	 */
	private void addToCart(JList list) throws SQLException
	{
		String currUserID = ((String)users.getSelectedItem()).split(":")[0];
		
		int[] selectedProducts = list.getSelectedIndices();
		String currProductName;
		for(int i : selectedProducts)
		{
			currProductName = ((String)list.getModel().getElementAt(i)).split(":")[0];
			result = query.executeQuery(String.format("SELECT ID FROM overall_inventory WHERE Name = '%s'", currProductName));
			result.first();
			
			query.execute(String.format("CALL %s.place_order(1, %s, %d)", username, currUserID, Integer.parseInt(result.getString("ID"))));
			((DefaultListModel)shoppingCart.getModel()).addElement(String.format("%s:\t$%.2f", currProductName, 0.00));
		}
		
		updateTotalCost(shoppingCart);
	}
	
	/**
	 * Updates the total cost of the cart
	 * 
	 * takes info from the list, gathers info
	 * @param list : list to gather products from
	 */
	private void updateTotalCost(JList list) throws SQLException
	{
		double sum = 0.0;
		String currProductID;
		for(int i = 0; i < list.getModel().getSize(); i ++)
		{
			currProductID = ((String)list.getModel().getElementAt(i)).split(":")[0];
			result = query.executeQuery(String.format("SELECT product.cost FROM product WHERE product_id = %s", currProductID));
			result.first();
			sum += Double.parseDouble(result.getString("cost"));
		}
		totalCost.setText(String.format("$%.2f", sum));
	}
	
	/**
	 * Adds the select products to the wishList
	 * 
	 * no return, just moves over data
	 */
	private void addToWishList(JList from, JList to)
	{
		DefaultListModel w = (DefaultListModel)to.getModel();
		int[] selectedProducts = from.getSelectedIndices();
		for(int index : selectedProducts)
			w.addElement(from.getModel().getElementAt(index));
	}
	
	/**
	 * Removes the selected item from the wishList as well as from the database
	 * 
	 * no return
	 */
	private void removeFromList(JList from)
	{
		int[] i = from.getSelectedIndices();
		String product;
		for(int index : i)
		{
			((DefaultListModel)from.getModel()).remove(index);
		}
	}

	/**
	 * previous page functions as research products, with a different offset
	 * also
	 * 	> changes currentPage field --;
	 * 	> deactivates on 1
	 * 
	 * @version 1: just decrement currentPageNumber
	 */
	private void previousPage()
	{
		currentPageNumber--;
		nextPage.setEnabled(true);
		currentPage.setText("" + currentPageNumber);
		
		products.setSelectedIndex(-1);
		try { products.setModel(populateProducts((DefaultListModel)products.getModel())); }
		catch (SQLException E) {};
		
		if(currentPageNumber == 1)
		{
			previousPage.setEnabled(false);
			return;
		}
	}
	
	/**
	 * next page function is the inverse of previousPage
	 * also
	 * 	> changes currentPageNumber ++;
	 *  
	 * @version 2: just increment currentPageNumber, decativate on 10
	 */
	private void nextPage()
	{
		currentPageNumber++;
		previousPage.setEnabled(true);
		currentPage.setText("" + currentPageNumber);
		
		products.setSelectedIndex(-1);;
		try { products.setModel(populateProducts((DefaultListModel)products.getModel())); }
		catch (SQLException E) {};
		
		if(currentPageNumber == MAX_PAGES + 1)
		{
			nextPage.setEnabled(false);
			return;
		}
	}

	/**
	 * next page helper method, user for the keystrokes
	 * 
	 * @param currentIndex, if current index is at bottom of page, decrement
	 * @param keyStroke, if up, or right -> next page
	 * 					down or left -> previousPage
	 */
	private void changePageHelpter(int currentIndex, KeyEvent keyStroke)
	{
		
	}
}

/**
 * Helper class for the GUI brings up a window to place an order
 * 
 * Allows user to select their shipping address
 * @author martinprice
 *
 */
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.*;

public class Order extends JFrame
{
	private JPanel addresses;
	private JPanel order;
	private JPanel buttons;
	
	private JList shoppingCart;
	private JComboBox customerAddresses;
	
	private JLabel addressLabel;
	
	private JButton placeOrder;
	private JButton cancelOrder;
	
	
	private String username;
	private Connection conn;
	private Statement query;
	private ResultSet result;
	
	/**
	 * Constructor
	 * 
	 * @param cart : DefaultListModel of current items in shopping cart
	 * @param c_id : customer id
	 */
	public Order(JList cart, String c_id, String un, String pw)
	{
		super("Place Order");
		if(setUpConnection(un, pw))
		{
			System.out.println("CONNECTION ESTABLSIHED");
			createGUI(cart, c_id);
		}	
		else
			System.err.println("COULD NOT CONNECT TO THE DATABASE");
	}
	
	/**
	 * Initializes SQL variables and connects to the data base
	 *
	 * @param un : user name
	 * @param pw : password
	 * @return true, no issues
	 * @throws SQLException 
	 */
	private boolean setUpConnection(String un, String pw)
	{
		try 
		{
			conn = DriverManager.getConnection(String.format("jdbc:mysql://elvis.rowan.edu:3306/%s?&useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", un), un, pw);
			query = conn.createStatement();
			return true;
		}
		catch(SQLException e) {e.printStackTrace(); return false;}
	}
	
	/**
	 * Builds the GUI
	 */
	private void createGUI(JList cart, String c_id)
	{
		setSize(500, 500);
		setLayout(new BorderLayout());
		
		buildCart(cart);
		buildAddresses(c_id);
		buildButtons();
		
		setVisible(true);
	}
	
	/**
	 * builds the cart
	 * Goes on the West part of Frame
	 * displays the items to be purchases and overall cost
	 * 
	 * @param cart : shoppingCart from Main Gui
	 */
	private void buildCart(JList cart)
	{
		order = new JPanel();
		order.setPreferredSize(new Dimension(250, 400));
		order.setLayout(new BorderLayout());
		
		shoppingCart = new JList(cart.getModel());
		shoppingCart.setPreferredSize(new Dimension(250, 350));
		
		order.add(shoppingCart, BorderLayout.NORTH);
		add(order, BorderLayout.WEST);
	}
	
	/**
	 * bulds the addresses
	 * Goes on the East part of the Frame
	 * Consists of a drop down box for a customers addresses
	 * Displays a shipping location and eastimated shipping time
	 * 
	 * @param c_id : customer_id
	 */
	private void buildAddresses(String c_id)
	{
		addresses = new JPanel();
		addresses.setPreferredSize(new Dimension(250, 400));
		addresses.setLayout(new BorderLayout());
		
		try { customerAddresses = new JComboBox(populateAddresses(new DefaultComboBoxModel(), c_id)); }
		catch (SQLException e) {};
		customerAddresses.setPreferredSize(new Dimension(250, 50));
		customerAddresses.addActionListener(e -> updateAddressText(((String)customerAddresses.getSelectedItem())) );
		
		addressLabel = new JLabel();
		addressLabel.setPreferredSize(new Dimension(250, 300));
		
		addresses.add(addressLabel, BorderLayout.SOUTH);
		addresses.add(customerAddresses, BorderLayout.NORTH);
		
		add(addresses, BorderLayout.EAST);
	}
	
	/**
	 * populates the address combo box using a query
	 * 
	 * @param ad :
	 * @param c_id : customer id
	 * @return ad : populated with addresses 
	 */
	private DefaultComboBoxModel populateAddresses(DefaultComboBoxModel ad, String c_id) throws SQLException
	{
		result = query.executeQuery(String.format("SELECT * FROM customer_area WHERE customer_id = %s", c_id));
		while(result.next())
			ad.addElement(String.format("%s\t%s\t%s\t%s", result.getString("street"), result.getString("city"), result.getString("state"), result.getString("zipcode")));
		return ad;
	}
	
	/**
	 * populates the address JLabel with current information 
	 */
	private void updateAddressText(String address)
	{
		String[] a = address.split("\t");
		String text = String.format("Ship the order to:\nStreet: %s\nCity: %s\nState: %s\nZip Code: %s", a[0], a[1], a[2], a[3]);
		addressLabel.setText(text);
		
	}
	
	/**
	 * builds the buttons panel
	 */
	private void buildButtons()
	{
		buttons = new JPanel();
		buttons.setPreferredSize(new Dimension(500, 100));
		buttons.setLayout(null);
		
		placeOrder = new JButton("Order Cart");
		placeOrder.setBounds(250,40,75,20);
		placeOrder.addActionListener(e -> placeOrder());
		
		cancelOrder = new JButton("Cancel Order");
		cancelOrder.setBounds(375, 40, 100, 20);
		cancelOrder.addActionListener(e -> cancelOrder());
		
		buttons.add(placeOrder);
		buttons.add(cancelOrder);
		
		add(buttons, BorderLayout.SOUTH);
	}

	
	private void placeOrder() 
	{
		setVisible(false);
	}
	
	private void cancelOrder()
	{
		System.exit(0);
	}
}

public class Main 
{
	public static void main(String[] args)
	{
		GUI g = new GUI("pricem2", "crabjournal");
	}
}
