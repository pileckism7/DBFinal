
/**
 * Graduate DataBases Final Project GUI
 * Professor Myers
 * 
 * @author martinprice
 * @author Mantas P
 * @author Chris Malitsky
 * @version November 18, 2018
 */

import java.util.ArrayList;

import java.awt.*;
import java.awt.event.KeyEvent;
import javax.swing.*;
public class GUI extends JFrame
{
	/** Instance Fields for GUI*/
	private JButton addToCart;
	private JButton addToWishList;
	private JButton saveCart;
	private JButton placeOrder;
	private JButton adminTools;
	private JButton search;
	private JButton wishListOrder;
	private JButton wishListRemove;
	private JButton previousPage;
	private JButton nextPage;
	private JLabel currentPage;
	
	private JPanel inventory;
	private JPanel inventoryButtons;
	private JPanel admin;
	private JPanel cart;
	private JPanel cartButtons;
	private JPanel wishList;
	private JPanel options;
	private JPanel userSelect;
	
	private JList products;
	private JLabel productName;
	private JLabel productDescription;
	private JLabel productAverageRating;
	
	private JList shoppingCart;
	private JList userWishList;
	
	private JComboBox users;
	private JComboBox filterSearch;
	private JComboBox filterSubSearch;
	private JLabel subSearchLabel;
	
	private JSlider priceRange;
	private JLabel maxPrice;
 
	private JMenuBar menu;
	
	private final int SHORTCUT_MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
	
	/** Instance fields for Variables */
	private int searchQueryReturn;
	private int currentPageNumber;
	
	/** Constructor */
	public GUI()
	{
		super("Daymnzon.com");
		createGUI();
	}
	
	/** Calls all the methods which create the individual components */
	private void createGUI()
	{
		setSize(1000, 850);
		setLayout(null);
		
		buildMenuBar();
		buildUsers();
		buildInventory();
		buildCart();
		buildWishList();
		buildAdmin();
		buildOptions();
		
		setVisible(true);
	}
	
	/** 
	 * Builds the menu bar
	 * Menu Bar contains:
	 * 	file > quit
	 */
	private void buildMenuBar()
	{
		menu = new JMenuBar();
		setJMenuBar(menu);
		
		//file
		JMenu file = new JMenu("File");
		menu.add(file);
		JMenuItem quit = new JMenuItem("Quit");
		quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, SHORTCUT_MASK));
		quit.addActionListener(e -> System.exit(0));
		file.add(quit);
	}
	
	/**
	 * Builds the users panel
	 */
	private void buildUsers()
	{
		userSelect = new JPanel();
		userSelect.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		userSelect.setLayout(new BorderLayout());
		userSelect.setBounds(750, 0, 250, 50);
		
		//new combo box
		users = new JComboBox(populateUsers());
		users.addActionListener(a -> changeCurrentUser((String)users.getSelectedItem()));
		userSelect.add(users, BorderLayout.CENTER);
		
		add(userSelect);
	}
	
	/**
	 * Changes the current user
	 * 	> updates wish List
	 * 	> changes Ad
	 * 	> changes Rate This Product
	 */
	private void changeCurrentUser(String currentUser)
	{
		
	}
	
	/**
	 * Runs a query to add users to the GUI
	 * 
	 * @return new String[] of users
	 * @version 1: no query, hard coded names
	 */
	private String[] populateUsers()
	{
		return new String[] {"Martin", "Chris", "Mantas", "Mia K"};
	}
	
	/**
	 * Builds the product view inventory,
	 * Contains the two buttons down below
	 */
	private void buildInventory()
	{
		inventory = new JPanel();
		inventory.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		inventory.setBounds(0,125,700,500);
		inventory.setLayout(new BorderLayout());
		
		inventoryButtons = new JPanel();
		inventoryButtons.setPreferredSize(new Dimension(700, 95));
		inventoryButtons.setLayout(null);
		inventoryButtons.setBackground(Color.LIGHT_GRAY);
		
		addToCart = new JButton("Add to Cart");
		addToCart.setBounds(475, 15, 125, 25);
		addToCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToCart.addActionListener(a -> addToCart(products, shoppingCart));
		inventoryButtons.add(addToCart);
		
		previousPage = new JButton("<");
		previousPage.setBounds(120, 40, 20, 20);
		previousPage.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		previousPage.addActionListener(p -> previousPage());
		inventoryButtons.add(previousPage);
		
		nextPage = new JButton(">");
		nextPage.setBounds(250, 40, 20, 20);
		nextPage.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		nextPage.addActionListener(n -> nextPage());
		inventoryButtons.add(nextPage);
		
		currentPageNumber = 1;
		currentPage = new JLabel("" + currentPageNumber);
		currentPage.setBounds(190, 40, 20, 20);
		inventoryButtons.add(currentPage);
		
		addToWishList = new JButton("Add To Wish List");
		addToWishList.setBounds(475, 60, 125, 25);
		addToWishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		addToWishList.addActionListener(a -> addToWishList(products, userWishList));
		inventoryButtons.add(addToWishList);
		
		products = new JList(populateProducts(new DefaultListModel()));
		products.setPreferredSize(new Dimension(400, 400));
		products.addListSelectionListener(p -> updateProductInfo(products.getSelectedValues())); 
		
		JPanel productInfo = new JPanel();
		productInfo.setPreferredSize(new Dimension(300, 400));
		productInfo.setLayout(null);
		
		productName = new JLabel();
		productName.setBounds(25, 25, 150, 25);
		productName.setHorizontalAlignment(JLabel.CENTER);
		productDescription = new JLabel("Description:\n");
		productDescription.setBounds(25, 75, 250, 250);
		productDescription.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		productAverageRating = new JLabel("Average Rating: ");
		productAverageRating.setBounds(25, 350, 150, 25);
		productAverageRating.setHorizontalAlignment(JLabel.CENTER);
		
		productInfo.add(productName);
		productInfo.add(productDescription);
		productInfo.add(productAverageRating);
		
		inventory.add(productInfo, BorderLayout.EAST);
		inventory.add(products, BorderLayout.WEST);
		inventory.add(inventoryButtons, BorderLayout.SOUTH);
		add(inventory);
	}
	
	/**
	 * Runs a query to initially populate the inventory
	 * 
	 * @ return new DefaultListModel of products
	 * @ version 2: no query, hard coded items ADDED to a DefaultListModel
	 */
	private DefaultListModel populateProducts(DefaultListModel productsQuery)
	{
		// productsQuery.addElement("Pen");
		// productsQuery.addElement("Computer");
		// productsQuery.addElement("Bike");
		
		return productsQuery;
	}
	
	/**
	 * Runs a query to gather product information from a selected product(s)
	 * 
	 * no return, hard data
	 * @version 1 : no query, only hands 1 selected value
	 * @throws InterruptedException 
	 */
	private void updateProductInfo(Object[] selected)
	{
		String[] p = ((String)selected[0]).split("\t\t");
		productName.setText(p[1]);
		productAverageRating.setText(p[2]);
		productDescription.setText("Description: \n\n" + p[0]);
	}
	
	/**
	 * Builds the cart
	 */
	private void buildCart()
	{
		cart = new JPanel();
		cart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		cart.setBounds(750, 125, 250, 500);
		cart.setLayout(new BorderLayout());
		
		cartButtons = new JPanel();
		cartButtons.setBackground(Color.CYAN);
		cartButtons.setPreferredSize(new Dimension(250, 100));
		cartButtons.setLayout(null);
		
		saveCart = new JButton("Save Cart");
		saveCart.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		saveCart.setBounds(50, 15, 150, 30);
		
		placeOrder = new JButton("Order");
		placeOrder.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		placeOrder.setBounds(25, 50, 200, 40);
		
		cartButtons.add(saveCart);
		cartButtons.add(placeOrder);
		
		shoppingCart = new JList(new DefaultListModel());
		shoppingCart.setPreferredSize(new Dimension(250, 550));
		
		cart.add(cartButtons, BorderLayout.SOUTH);
		cart.add(shoppingCart, BorderLayout.CENTER);
		
		add(cart);
	}
	
	/**
	 * Builds the wishlist
	 * contains
	 * 	> WishList
	 * 	> Ratings
	 */
	private void buildWishList()
	{
		wishList = new JPanel();
		wishList.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		wishList.setBounds(0, 650, 700, 150);
		wishList.setLayout(new BorderLayout());
		
		userWishList = new JList(new DefaultListModel());
		userWishList.setPreferredSize(new Dimension(200,100));
		
		JPanel userWishListOptions = new JPanel();
		userWishListOptions.setPreferredSize(new Dimension(100, 100));
		userWishListOptions.setLayout(null);
		
		wishListOrder = new JButton("Move to Cart");
		wishListOrder.setBounds(5, 25, 90, 20);
		wishListOrder.addActionListener(a -> addToCart(userWishList, shoppingCart));
		wishListRemove = new JButton("Remove");
		wishListRemove.setBounds(5, 75, 90, 20);
		wishListRemove.addActionListener(b -> removeFromList(userWishList));
		
		userWishListOptions.add(wishListOrder);
		userWishListOptions.add(wishListRemove);
		
		JPanel ratingPanel = new JPanel();
		ratingPanel.setBackground(Color.LIGHT_GRAY);
		
		wishList.add(userWishListOptions,BorderLayout.CENTER);
		wishList.add(ratingPanel, BorderLayout.EAST);
		wishList.add(userWishList, BorderLayout.WEST);
		
		add(wishList);
	}
	
	/**
	 * Builds the admin panel
	 * Panel contains:
	 * 	> admin button
	 * 	> advertisement
	 */
	private void buildAdmin()
	{
		admin = new JPanel();
		admin.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		admin.setBounds(700, 650, 300, 150);
		admin.setLayout(null);
		
		adminTools = new JButton("Admin Access");
		adminTools.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		adminTools.setBounds(50, 125, 200, 25);
		
		admin.add(adminTools, BorderLayout.SOUTH);
		
		add(admin);
	}
	
	/**
	 * Builds the options bar
	 * Bar contains:
	 * 	> databases
	 * 	> search btn
	 */
	private void buildOptions()
	{
		options = new JPanel();
		options.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		options.setBounds(0, 0, 700, 100);
		options.setLayout(null);
		
		filterSearch = new JComboBox(new String[] {"None", "Marketplace", "Categories", "Suppliers"});
		filterSearch.setBounds(0, 40, 150,25);
		filterSearch.addActionListener(a -> setSubSearchFilter((String)filterSearch.getSelectedItem()));
		
		filterSubSearch = new JComboBox(new String[] {"None"});
		filterSubSearch.setBounds(175, 40, 150, 25);
		
		maxPrice = new JLabel("$");
		maxPrice.setBounds(525,65, 150, 20);
		maxPrice.setHorizontalAlignment(JLabel.CENTER);
		priceRange = new JSlider(0, populatePrice(), populatePrice() / 2);
		priceRange.setBounds(525, 40, 150, 25);
		priceRange.setMajorTickSpacing(populatePrice() / 4);
		priceRange.setMinorTickSpacing(populatePrice() / 16);
		priceRange.setPaintTicks(true);
		priceRange.addChangeListener(ce -> maxPrice.setText("$" + priceRange.getValue()));
		
		search = new JButton("Search");
		search.setBounds(300,75, 100, 25);
		search.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		search.setEnabled(true);
		search.addActionListener(s -> search((String)filterSearch.getSelectedItem(),
					(String)filterSubSearch.getSelectedItem(), priceRange.getValue()));
		
		JLabel f = new JLabel("Filter By");
		f.setBounds(0,10, 150,25);
		f.setHorizontalAlignment(JLabel.CENTER);
		
		subSearchLabel = new JLabel("None");
		subSearchLabel.setBounds(175, 10, 150, 25);
		subSearchLabel.setHorizontalAlignment(JLabel.CENTER);
		
		JLabel p = new JLabel("Price Range");
		p.setBounds(525, 10, 150, 25);
		p.setHorizontalAlignment(JLabel.CENTER);
		
		options.add(f);
		options.add(subSearchLabel);
		options.add(p);
		
		options.add(filterSearch);
		options.add(filterSubSearch);
		options.add(priceRange);
		options.add(maxPrice);
		
		options.add(search);
		add(options);
	}
	
	/**
	 * Runs a query to generate all the suppliers
	 * 
	 * @return a new String[] of suppliers + ALL
	 * @version 1 : no query, hard data
	 */
	private String[] populateSuppliers()
	{
		return new String[] {"Apple", "Microsoft", "Android"};
	}
	
	/**
	 * Runs a query to generate all the categories
	 * 
	 * @return a new String[] of categories + ALL
	 * @version 1 : no query, hard data
	 */
	private String[] populateCategories()
	{
		return new String[] {"Entertainment", "Hardware", "Software"};
	}
	
	/**
	 * Runs a query to find the most expensive item in the Inventory
	 * 
	 * @return int of the highest found price
	 * @version 1 : no query, hard data
	 */
	private int populatePrice()
	{
		return 10000;
	}
	
	/**
	 * Runs a query based on the information passed from the options ComboBox's
	 * 
	 * No return, copies the query into inventory
	 * @version 1 : no query, load data into inventory view manually by adding to DefaultList
	 */
	private void search(String searchQ, String subSearchQ, int price) 
	{
		DefaultListModel searchQuery = (DefaultListModel)products.getModel();
		searchQuery.addElement(String.format("Products under:\t\t%s\t\t%s\t\t$%d", searchQ, subSearchQ, price));
		
		searchQueryReturn = 1;
		if(searchQueryReturn > 20)
		{
			nextPage.setEnabled(true);
			previousPage.setEnabled(true);
		}
		currentPage.setText("" + 1);
	}
	
	/**
	 * Runs a query to populate the sub search filter drop down, change label text
	 * @param searchType
	 * @version 1 : hard data, no query, case statement
	 */
	private void setSubSearchFilter(String searchType)
	{
		subSearchLabel.setText(searchType);
		DefaultComboBoxModel subSearchQuery = (DefaultComboBoxModel)filterSubSearch.getModel();
		subSearchQuery.removeAllElements();
		String[] query;
		switch(searchType)
		{
			case "Marketplace":
			{
				query = new String[] {"Daymnzon", "Adventureworks", "Sakila", "Northwind"};
				break;
			}
			case "Categories":
			{
				query = populateCategories();
				break;
			}
			case "Suppliers":
			{
				query = populateSuppliers();
				break;
			}
			default:
				query = new String[] {"None"};
				break;
		}
		
		for(String q : query)
			subSearchQuery.addElement(q);
	}
	
	/**
	 * Adds the select products to the cart
	 * 
	 * @param l : JList to pull from
	 * no return, just moves data over
	 */
	private void addToCart(JList from, JList to)
	{
		DefaultListModel cart = (DefaultListModel)to.getModel();
		int[] selectedProducts = from.getSelectedIndices();
		for(int index : selectedProducts)
			cart.addElement(from.getModel().getElementAt(index));
			
	}
	
	/**
	 * Adds the select products to the wishList
	 * 
	 * no return, just moves over data
	 */
	private void addToWishList(JList from, JList to)
	{
		DefaultListModel w = (DefaultListModel)to.getModel();
		int[] selectedProducts = from.getSelectedIndices();
		for(int index : selectedProducts)
			w.addElement(from.getModel().getElementAt(index));
	}
	
	/**
	 * Removes the selected item from the wishList
	 * 
	 * no return
	 */
	private void removeFromList(JList from)
	{
		int[] i = from.getSelectedIndices();
		for(int index : i)
			((DefaultListModel)from.getModel()).remove(index);
	}

	/**
	 * previous page functions as research products, with a different offset
	 * also
	 * 	> changes currentPage field --;
	 * 	> deactivates on 1
	 * 
	 * @version 1: just decrement currentPageNumber
	 */
	private void previousPage()
	{
		if(currentPageNumber == 1)
		{
			previousPage.setEnabled(false);
			return;
		}
		currentPageNumber--;
		nextPage.setEnabled(true);
		currentPage.setText("" + currentPageNumber);
	}
	
	/**
	 * next page function is the inverse of previousPage
	 * also
	 * 	> changes currentPageNumber ++;
	 *  
	 * @version 1: just increment currentPageNumber, decativate on 10
	 */
	private void nextPage()
	{
		if(currentPageNumber == 10)
		{
			nextPage.setEnabled(false);
			return;
		}
		currentPageNumber++;
		previousPage.setEnabled(true);
		currentPage.setText("" + currentPageNumber);
	}
}

